/**
 * sub: link
 * author: Manuel
 */

define(
    'ds2-link', [
        'jquery',
        'ds2-video-layer-link',
        'ds2-animation',
        'ds2-accessibility',
        'jquery-dotdotdot'
    ],
    function($, videoLayerLink, Animation, Accessibility) {
        'use strict';

        function getUrlParts(url) {
            var iSearch = url.indexOf('?');
            var iHash = url.indexOf('#');
            var pathname = url;
            var search = '';
            var hash = '';
            if (iSearch > -1 && iHash > -1) {
                pathname = url.slice(0, iSearch);
                search = url.slice(iSearch, iHash);
                hash = url.slice(iHash);
            } else if (iSearch > -1 && iHash === -1) {
                pathname = url.slice(0, iSearch);
                search = url.slice(iSearch);
            } else if (iSearch === -1 && iHash > -1) {
                pathname = url.slice(0, iHash);
                hash = url.slice(iHash);
            }
            return {
                pathname: pathname,
                search: search,
                hash: hash
            }
        }

        function Link(element) {
            if (!element) return;
            this.$element = $(element);
            this.isParametersActive = this.$element.data('forwardparameters');
            this.options = {
                linkTruncateClass: 'ds2-ellipsis',
                linkTruncateClassShort: 'ds2-ellipsis-short',
                maxLineNumber: 4,
                maxLineNumberShort: 2
            };
            this.animation = new Animation();
            this.accessibility = new Accessibility(element);
            this.initTrigger();
            // initialize if it is a lightbox trigger
            var lightBoxTargetId = this.$element.data('lightboxTargetId');
            if (lightBoxTargetId) {
                var lightBoxElement = $('*[data-lightbox-id="' + lightBoxTargetId + '"]');
                if (lightBoxElement.length && lightBoxElement[0].Lightbox) {
                    this.$element.on('click', function() {
                        lightBoxElement[0].Lightbox.openLightbox(this.element);
                    }.bind(this));
                } else {
                    var self = this;
                    setTimeout(() => {
                 	    lightBoxElement = $('*[data-lightbox-id="' + lightBoxTargetId + '"]');
                 		if (lightBoxElement.length && lightBoxElement[0].Lightbox) {
                            self.$element.on('click', function() {
                                lightBoxElement[0].Lightbox.openLightbox(self.element);
                 	        }.bind(this));
                        }
                    }, 1000)
                }
            }
            if (this.isParametersActive) {
                var requestParams = this.checkRequestParams(window.location.href);
                var parts = getUrlParts(this.getHref());
                parts.search ? requestParams = requestParams.replace('?','&'): '';
                this.setHref(parts.pathname + parts.search + requestParams + parts.hash);
            }
        }

        Link.prototype.initTrigger = function() {
            if (this.$element.hasClass(this.options.linkTruncateClass)) {
                this.truncate(this.options.maxLineNumber);
            } else if (this.$element.hasClass(this.options.linkTruncateClassShort)) {
                this.truncate(this.options.maxLineNumberShort);
            }
            this.animation.smoothScrollingToAnchorSamePage(this.$element);
        };

        Link.prototype.truncate = function(maxLineNumber) {
            var lineHeight = parseInt(this.$element.css('line-height')),
                maxHeight = lineHeight * maxLineNumber;
            $(this.$element).parent().dotdotdot({
                height: maxHeight,
                wrap: 'letter',
                watch: true,
                tolerance : 12
            });
        };

        Link.prototype.checkRequestParams = function(url) {
            if (url.length <= 0 || !~url.indexOf('?')) return '';
            var params = url.replace(/.*?\?/,"").split('&');
            return params.length > 0 ? url.slice(url.indexOf('?')) : undefined;
        };

        Link.prototype.getHref = function() {
            var href = this.$element.attr('href');
            return href ? href : ''
        };

        Link.prototype.setHref = function(href) {
            this.$element.attr('href', href);
        };

        return Link;
    }
);
