define('ds2-page-tracking', ['jquery', 'lodash', 'ds2-page-context', 'ds2-page-tron-tracking'],
    function($, _, context, EnhancedActivityMap) {
    'use strict';

    var dataAttributes = {
        linkId: 'data-tracking-linkid',
        linkIdInactive: 'data-tracking-linkid-inactive',
        regionId: 'data-tracking-regionid',
        trackingBlock: 'data-tracking-block',
        elementDisplay: 'data-tracking-element-display',
        skipCount: 'data-tracking-skip-count',
    };

    var selectors = {
        regionId: `[${dataAttributes.regionId}]`,
        linkId: `[${dataAttributes.linkId}]`,
        linkIdInactive: `[${dataAttributes.linkIdInactive}]`,
        containerBlock: `[${dataAttributes.trackingBlock}="true"]`,
        containerBlockClone: `[${dataAttributes.trackingBlock}="clone"]`,
        component: `[${dataAttributes.regionId}]:not([${dataAttributes.trackingBlock}])`,
        button: `button[${dataAttributes.linkId}]`,
        anchor: 'a[href^="#"]',
        elementsWithoutLinkIdSelector: `a:not([${dataAttributes.linkId}]), button:not([${dataAttributes.linkId}])`,
        skipCount: `[${dataAttributes.skipCount}]`,
        notSkipCount: `:not([${dataAttributes.skipCount}])`,
        debug: 'activitydebug',
    };

    var events = {
        xfToggleReloadFinished: 'XfToggle:reloadFinished',
        buttonChange: 'tron-tracking--event-button-change',
        componentChange: 'page-tracking--component-update',
    };

    var separator = '¦';
    var emptyCount = '—';

    var externalLinks = [];
    var EMPTY_TRACKING_PART = `${separator}${separator}`;

    var allowedInternalLinks = [
        'approvedusedminis.',
        'bmw-int',
        'bmw-motorrad.',
        'bmw.',
        'bmwgroup.',
        'bmwmotorcycles.',
        'bmwmotorrad.',
        'bmwusa.',
        'mini-int',
        'mini.',
        'minichina.',
    ];

    var interactions = {
        internal: 'internal click',
        external: 'external click',
        open: 'open content',
        close: 'close content',
    };
    /**
     * This component is used to do the page tron tracking.
     * @param element
     * @constructor
     */
    function PageTracking(element) {
        this.element = element;
        this.trackingButtons = element.querySelectorAll(`${selectors.button}, ${selectors.anchor}`);
        this.tron = new EnhancedActivityMap.default();
        this.init();
    }

    /**
     * Initialize trackings
     */
    PageTracking.prototype.init = function() {
        this.initActivityMapTracking();
        this.initTronTracking();

        this.setDebug();
        var self = this;
        window.addEventListener('resize', _.debounce(() => self.setDebug()), 1000);
    }

    /**
     * Initialize tron tracking for the Page component.
     */
    PageTracking.prototype.initTronTracking = function() {
        var self = this;
        this.element.addEventListener(events.buttonChange, ({ detail }) => {
            self.addEventListenerToButtons([detail.element]);
        });

        this.addEventListenerToButtons(self.trackingButtons);
    }

    /**
     * Initialises activity map tracking for the Page component.
     */
    PageTracking.prototype.initActivityMapTracking= function() {
        var self = this;
        this.updateActivityMapTracking(this.element);
        document.addEventListener(
            events.xfToggleReloadFinished,
            () => self.updateActivityMapTracking(),
        );

        this.element.addEventListener(events.componentChange, ({ detail }) => {
            self.updateActivityMapTracking(
                (detail && detail.element) ? detail.element : self.element,
            );
        });
    }

    /**
     * Add event listener to array of buttons
     *
     * @param {Array} arrayOfButtons - array of buttons
     * @example addEventListenerToButtons(arrayOfButtons, classToCheck = false)
     */
    PageTracking.prototype.addEventListenerToButtons = function(arrayOfButtons) {
        var self = this;
        arrayOfButtons.forEach((currentButton) => {
            currentButton.addEventListener('click', () => {
                if (currentButton.hasAttribute(dataAttributes.linkId)) {
                    self.tron.activityMapClick();
                }
            });
        });
    }

    /**
     * Updates the activity map tracking attributes of container block's descendants in the whole
     * page.
     *
     * @param {HTMLElement} context - current component
     * @example updateActivityMapTracking(context);
     */
    PageTracking.prototype.updateActivityMapTracking = function(context) {
        var self = this;
        this.blocks = [context, ...context.querySelectorAll(`${selectors.containerBlock}${selectors.notSkipCount}`)];
        this.components = [...context.querySelectorAll(`${selectors.component}${selectors.notSkipCount}`)];
        this.links = [...context.querySelectorAll(`${selectors.linkId}${selectors.notSkipCount}`)];

        this.addTrackingCounters();
        this.addEmptyTrackingCounters(context);

        this.blocks.forEach((containerBlock) => {
            self.passBlockInformationToDescendants(containerBlock);
        });

        this.links.forEach((link) => {
            self.checkForExternalLink(link);
        });

        this.addEventListenerToButtons(externalLinks);
    }

    /**
     * Adds tracking counters to blocks, components and links.
     */
    PageTracking.prototype.addTrackingCounters = function() {
        var self = this;
        // block counters
        this.addCountersToDescendants(
            self.groupDescendants(self.blocks, selectors.containerBlock),
            dataAttributes.regionId,
            self.addBlockCounterToRegionId,
        );

        // component counters
        this.addCountersToDescendants(
            self.groupDescendants(this.components, selectors.containerBlock),
            dataAttributes.regionId,
            self.addComponentCounterToRegionId,
        );

        // link counters
        this.addCountersToDescendants(
            self.groupDescendants(this.links, selectors.regionId),
            dataAttributes.linkId,
            self.addLinkCounterToLinkId,
        );
    }

    /**
     * Sets debug output to the page
     */
    PageTracking.prototype.setDebug = function() {
        if (window.location.search.indexOf('activitydebug') !== -1) {
            this.highlightTrackingIssues();
            this.logTrackingIssues();
        }
    }

    /**
     * Finds the ancestors (which match the ancestor selector) of the passed elements. It then
     * creates a two-dimensional array; each row contains the descendants of each ancestor found.
     *
     * @param {HTMLElement[]} elements - elements for which an ancestor should be found
     * @param {string} ancestorSelector - CSS selector for finding the ancestor of the elements
     * @example PageTracking.createGroupOfDescendants(links, '[data-tracking-regionid]');
     * @returns {HTMLElement[][]} two-dimensional array containing groups of descendants
     */
    PageTracking.prototype.groupDescendants = function(elements, ancestorSelector) {
        var descendantsMap = new Map();
        var topAncestors = [];
        elements.forEach((element) => {
            const ancestor = element.parentNode.closest(ancestorSelector);
            if (ancestor) {
                var descendants = descendantsMap.get(ancestor);
                if (descendants) {
                    descendants.push(element);
                } else {
                    descendantsMap.set(ancestor, [element]);
                }
            } else {
                topAncestors.push(element);
            }
        });
        return [topAncestors, ...Array.from(descendantsMap.values())];
    }

    /**
     * Adds counters to the elements contained in each group of the passed two-dimensional array.
     * In order to achieve this, it gets the value of the corresponding tracking attribute
     * ("data-tracking-regionid" for block and component, "data-tracking-linkid" for links) and
     * updates it by applying a function depending on the type of tracking item (block, component
     * or link).
     *
     * @param {HTMLElement[][]} groupsOfDescendants - groups of descendants of tracking ancestors
     * @param {string} trackingAttribute - "data-tracking-regionid" or "data-tracking-linkid"
     * @param {Function} counterFunction - function to add counters for blocks, components or links
     * @param {string} counter - overwrite counter for example with empty counter string
     * @example
     * addCountersToDescendants(groupsOfDescendants, 'data-tracking-regionid',
     * PageTracking.addBlockCounterToRegionId);
     */
    PageTracking.prototype.addCountersToDescendants = function(groupsOfDescendants, trackingAttribute, counterFunction, counter) {
        groupsOfDescendants.forEach((descendants) => {
            descendants.forEach((item, index) => {
                var trackingId = item.getAttribute(trackingAttribute);

                // Only overwrite regionIds and linkIds which already contain a tracking separator,
                // in order to avoid overwriting legacy tracking attributes
                if (trackingId && trackingId.includes(separator)) {
                    var newId = counterFunction(trackingId, counter || index + 1);
                    item.setAttribute(trackingAttribute, newId);
                }
            });
        });
    }

    /**
     * Adds blockCounter to regionId.
     *
     * @param {string} blockRegionId - regionId of the block
     * @param {number} blockCounter - position of the block in the page or inside of parent block
     * @example
     * addBlockCounterToRegionId('navigation l2¦¦flyout 2¦¦¦', 4)
     * output: navigation l2¦4¦flyout 2¦¦¦
     * @returns {string} regionId with blockCounter
     */
    PageTracking.prototype.addBlockCounterToRegionId = function(blockRegionId, blockCounter) {
        var regionIdGroups = PageTracking.prototype.extractGroupsFromRegionId(blockRegionId);
        return PageTracking.prototype.generateRegionId({
            ...regionIdGroups,
            blockCounter,
        });
    }

    /**
     * Adds componentCounter to regionId.
     *
     * @param {string} componentRegionId - regionId of the component
     * @param {number} componentCounter - position of the component in the block
     * @example
     * addComponentCounterToRegionId('¦¦¦list (vertical)¦¦Unternehmen', 3);
     * output: ¦¦¦list (vertical)¦3¦Unternehmen
     * @returns {string} regionId with componentCounter
     */
    PageTracking.prototype.addComponentCounterToRegionId = function (componentRegionId, componentCounter) {
        var regionIdGroups = PageTracking.prototype.extractGroupsFromRegionId(componentRegionId);
        return PageTracking.prototype.generateRegionId({
            ...regionIdGroups,
            componentCounter,
        });
    }

    /**
     * Adds linkCounter to linkId.
     *
     * @param {string} linkId - linkId of the link
     * @param {number} counter - position of the link in the component or block
     * @example
     * addCounterToLinkId('card¦¦m8 coupé¦internal click', 1);
     * output: card¦1¦m8 coupé¦internal click
     * @returns {string} linkId with linkCounter
     */
    PageTracking.prototype.addLinkCounterToLinkId = function(linkId, counter) {
        var linkIdGroups = PageTracking.prototype.extractGroupsFromLinkId(linkId);
        return PageTracking.prototype.generateLinkId({
            ...linkIdGroups,
            counter,
        });
    }

    /**
     * Extracts the tracking groups from a regionId. The keys of the tracking groups are:
     * block, blockCounter, blockName, component, componentCounter, componentName
     *
     * @param {string} regionId - the regionId
     * @example
     * regionId: footer¦1¦column¦list (vertical)¦1¦unternehmen
     * output:
     * {
     * block: "footer",
     * blockCounter: "1",
     * blockName: "column",
     * component: "list (vertical)",
     * componentCounter: "1",
     * componentName: "unternehmen"
     * }
     * @returns {object} tracking groups
     */
    PageTracking.prototype.extractGroupsFromRegionId = function(regionId) {
        var regexpNames = `(?<block>.*)${separator}(?<blockCounter>.*)${separator}(?<blockName>.*)${separator}(?<component>.*)${separator}(?<componentCounter>.*)${separator}(?<componentName>.*)`;
        var match = RegExp(regexpNames, 'mg').exec(regionId);
        return match ? match.groups : {};
    }

    /**
     * Extracts the tracking groups from a linkId. The keys of the tracking groups are:
     * type, counter, value, interaction
     *
     * @param {string} linkId - the linkId
     * @example
     * regionId: card¦1¦m8 coupé¦internal click
     * output:
     * {
     * type: "card",
     * counter: "1",
     * value: "m8 coupé",
     * interaction: "internal click"
     * }
     * @returns {object} tracking groups
     */
    PageTracking.prototype.extractGroupsFromLinkId = function(linkId) {
        var regexpNames = `(?<type>.*)${separator}(?<counter>.*)${separator}(?<value>.*)${separator}(?<interaction>.*)`;
        var match = RegExp(regexpNames, 'mg').exec(linkId);
        return match ? match.groups : {};
    }

    /**
     * Generates a regionId from a regionIdGroups object.
     *
     * @param {object} regionIdGroups - regionIdGroups
     * @param {string} regionIdGroups.block - block
     * @param {string} regionIdGroups.blockCounter - blockCounter
     * @param {string} regionIdGroups.blockName - blockName
     * @param {string} regionIdGroups.component - component
     * @param {string} regionIdGroups.componentCounter - componentCounter
     * @param {string} regionIdGroups.componentName - componentName
     * @example
     * {
     * block: "footer",
     * blockCounter: "6",
     * blockName: "column",
     * component: "list (vertical)",
     * componentCounter: "3",
     * componentName: "unternehmen"
     * }
     * @returns {string} regionId
     */
    PageTracking.prototype.generateRegionId = function({
        block = '',
        blockCounter = '',
        blockName = '',
        component = '',
        componentCounter = '',
        componentName = '',
    } = {}) {
        return [block, blockCounter, blockName, component, componentCounter, componentName]
            .join(separator);
    }

    /**
     * Generates a linkId from a linkIdGroups object.
     *
     * @param {object} linkIdGroups - linkIdGroups
     * @param {string} linkIdGroups.type - type
     * @param {string} linkIdGroups.counter - counter
     * @param {string} linkIdGroups.value - value
     * @param {string} linkIdGroups.interaction - interaction
     * @example
     * {
     * type: "card",
     * counter: "1",
     * value: "m8 coupé",
     * interaction: "internal click"
     * }
     * @returns {string} linkId
     */
    PageTracking.prototype.generateLinkId = function({
        type = '',
        counter = '',
        value = '',
        interaction = '',
    } = {}) {
        return [type, counter, value, interaction]
            .join(separator);
    }

    /**
     * Adds empty tracking counters to blocks, components and links.
     *
     * @param {HTMLElement} context - current component
     * @example addEmptyTrackingCounters(context);
     */
    PageTracking.prototype.addEmptyTrackingCounters = function(context) {
        var self = this;
        var blocks = [...context.querySelectorAll(`${selectors.block}${selectors.skipCount}`)];
        var components = [...context.querySelectorAll(`${selectors.component}${selectors.skipCount}`)];
        var links = [...context.querySelectorAll(`${selectors.linkId}${selectors.skipCount}`)];

        // empty block counters
        this.addCountersToDescendants(
            self.groupDescendants(blocks, selectors.containerBlock),
            dataAttributes.regionId,
            self.addBlockCounterToRegionId,
            emptyCount,
        );

        // empty component counters
        this.addCountersToDescendants(
            self.groupDescendants(components, selectors.component),
            dataAttributes.regionId,
            self.addComponentCounterToRegionId,
            emptyCount,
        );

        // empty link counters
        this.addCountersToDescendants(
            self.groupDescendants(links, selectors.regionId),
            dataAttributes.linkId,
            self.addLinkCounterToLinkId,
            emptyCount,
        );
    }

    /**
     * Updates the activity map tracking attributes of the passed block's descendants.
     *
     * @param {HTMLElement} block - the container block element
     * @example PageTracking.passBlockInformationToDescendants(block);
     */
    PageTracking.prototype.passBlockInformationToDescendants = function(block) {
        // update regionId of descendants with regionId of block
        var descendantsWithRegionId = [...block.querySelectorAll(selectors.regionId)];
        var blockDescendants = descendantsWithRegionId.filter((descendant) => descendant
            .closest(selectors.containerBlock) === block);

        var blockRegionId = block.getAttribute(dataAttributes.regionId);
        if (blockRegionId) {
            blockDescendants.forEach((descendant) => {
                var descendantRegionId = descendant.getAttribute(dataAttributes.regionId);
                var componentPart = this.extractComponentTrackingPart(descendantRegionId);
                if (componentPart !== EMPTY_TRACKING_PART) {
                    var blockPart = this.extractBlockTrackingPart(blockRegionId);
                    descendant.setAttribute(dataAttributes.regionId, `${blockPart}¦${componentPart}`);
                }
            });
        }
    }

    /**
     * Extracts the block tracking part from a regionId.
     *
     * @param {string} regionId - the regionId
     * @example
     * regionId: footer¦1¦column¦list (vertical)¦1¦unternehmen
     * blockPart: footer¦1¦column
     * @returns {string} block tracking part
     */
    PageTracking.prototype.extractBlockTrackingPart = function(regionId) {
        var groups = this.extractGroupsFromRegionId(regionId);
        if (!groups) return EMPTY_TRACKING_PART;

        var { block, blockCounter, blockName } = groups;
        return [block, blockCounter, blockName].join(separator);
    }

    /**
     * Extracts the component tracking part from a regionId.
     *
     * @param {string} regionId - the regionId
     * @example
     * regionId: footer¦1¦column¦list (vertical)¦1¦unternehmen
     * componentPart: list (vertical)¦1¦unternehmen
     * @returns {string} component tracking part
     */
    PageTracking.prototype.extractComponentTrackingPart = function(regionId) {
        var groups = this.extractGroupsFromRegionId(regionId);
        if (!groups) return EMPTY_TRACKING_PART;

        var { component, componentCounter, componentName } = groups;
        return [component, componentCounter, componentName].join(separator);
    }

    /**
     * Extracts the tracking groups from a regionId. The keys of the tracking groups are:
     * block, blockCounter, blockName, component, componentCounter, componentName
     *
     * @param {string} regionId - the regionId
     * @example
     * regionId: footer¦1¦column¦list (vertical)¦1¦unternehmen
     * output:
     * {
     * block: "footer",
     * blockCounter: "1",
     * blockName: "column",
     * component: "list (vertical)",
     * componentCounter: "1",
     * componentName: "unternehmen"
     * }
     * @returns {object} tracking groups
     */
    PageTracking.prototype.extractGroupsFromRegionId = function(regionId) {
        var regexpNames = `(?<block>.*)${separator}(?<blockCounter>.*)${separator}(?<blockName>.*)${separator}(?<component>.*)${separator}(?<componentCounter>.*)${separator}(?<componentName>.*)`;
        var match = RegExp(regexpNames, 'mg').exec(regionId);
        return match ? match.groups : {};
    }

    /**
     * Checks for external links,
     * changes linkID interaction
     * and adds found entry to externalLinks array
     *
     * @param {HTMLElement} link - the current link element
     * @example
     * checkForExternalLink(link)
     */
    PageTracking.prototype.checkForExternalLink = function(link) {
        if (!this.isInternalLink(link.getAttribute('href'))) {
            var linkId = link.getAttribute(dataAttributes.linkId);
            var linkIdGroups = this.extractGroupsFromLinkId(linkId);

            if (linkIdGroups.interaction === interactions.internal) {
                var newID = this.generateLinkId({
                    ...linkIdGroups,
                    interaction: interactions.external,
                });

                link.setAttribute(dataAttributes.linkId, newID);
                externalLinks.push(link);
            }
        }
    }

    /**
     * Checks if provided url is internal or external link
     *
     * @param {string} url - local or absolute
     * @example
     * isInternalLink('https://configure.bmw.de');
     * @returns {boolean|null} `true` if
     * - url starts with '/' or '#' or
     * - has the same hostname as the window location
     * - has parts of hostname in allowed list
     */
    PageTracking.prototype.isInternalLink = function(url) {
        if (!url) return null;
        if (/^[#|/]/.exec(url)) return true;

        try {
            var { hostname } = new URL(url);
            var isSameHost = window.location.hostname === hostname;
            var isInAllowedList = allowedInternalLinks.some((string) => hostname.startsWith(string) || hostname.includes(`.${string}`));
            return isSameHost || isInAllowedList;
        } catch (e) {
            return null;
        }
    }

    return PageTracking;
});
